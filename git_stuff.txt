Here's a concise yet comprehensive Git cheat sheet covering all your questions and essential commands every developer should know:

### 1. **Tagging Commits**
```bash
# Create lightweight tag
git tag v1.0.0

# Create annotated tag (with message)
git tag -a v1.0.0 -m "Release version 1.0.0"

# Tag specific commit
git tag -a v1.0.1 abc1234 -m "Hotfix for issue #123"

# Push tags to remote
git push origin v1.0.0  # Single tag
git push origin --tags  # All tags

# List tags
git tag
git show v1.0.0  # View tag details
```

### 2. **Basic Workflow**
```bash
# Check status
git status

# Stage changes
git add file.txt       # Specific file
git add .              # All changes
git add -p             # Interactive staging

# Commit (with message)
git commit -m "Message"

# Commit using VSCode as editor (will wait until you close)
git config --global core.editor "code --wait"
git commit             # Opens VSCode to write message
```

### 3. **Configuration**
```bash
# Set global config (name/email/editor)
git config --global user.name "Your Name"
git config --global user.email "your@email.com"
git config --global core.editor "code --wait"

# View config
git config --list
```

### 4. **Branching**
```bash
# Create branch
git branch new-feature
git checkout -b new-feature  # Create and switch

# Merge
git checkout main
git merge new-feature

# Delete branch
git branch -d new-feature   # Local
git push origin --delete new-feature  # Remote
```

### 5. **Pushing/Pulling**
```bash
# Push to remote
git push origin main
git push -u origin new-feature  # Set upstream

# Pull changes
git pull
git fetch  # Download without merging
```

### 6. **Undoing Things**
```bash
# Amend last commit
git commit --amend

# Reset changes
git reset HEAD~1        # Undo last commit (keeps changes)
git reset --hard HEAD~1 # Completely undo last commit

# Revert a commit
git revert abc1234
```

### 7. **Viewing History**
```bash
git log
git log --oneline --graph --all  # Compact view
git show abc1234    # View specific commit
git diff            # Unstaged changes
git diff --staged   # Staged changes
```

### 8. **Stashing**
```bash
git stash           # Save changes temporarily
git stash pop       # Reapply last stash
git stash list      # View stashes
```

### 9. **VS Code Integration Tips**
1. Set as default editor:
   ```bash
   git config --global core.editor "code --wait"
   ```
2. Use VS Code's built-in Git GUI for:
   - Staging changes
   - Viewing diffs
   - Committing with rich messages

### 10. **Essential Everyday Commands**
```bash
# Typical workflow:
git status
git add .
git commit -m "Meaningful message"
git push

# When working with branches:
git checkout -b feature
# ...make changes...
git add .
git commit -m "Feature done"
git checkout main
git merge feature
```

### Pro Tips:
- Write **clear commit messages** (1st line summary, then details)
- **Pull before pushing** to avoid conflicts
- Use **.gitignore** for files to exclude
- **Tag important releases** for easy rollback
- **Branch often** to isolate features/fixes

